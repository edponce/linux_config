#!/bin/bash

. "$HOME/bin/error_utils"
. "$HOME/bin/custom_utils"

usage()
{
cat << _USAGE_
Usage: $(basename $0) [--help] [--audio] [--window] [--timer SECONDS] [--vcodec VIDEO_CODEC] [--rate FRAME_RATE] [--screen SCREEN_ID] [--outfile "OUTFILE"]

Record screen into a video file.

Default is disabled audio.
Default is fullscreen, enabled flag to select specific window.
Default timer is 5 seconds prior to recording.
Default frame rate is 30 frames/sec.
Default outfile is '$HOME/screencast_DATE_TIME.mp4'
Supported outfile formats: avi, mp4, mpg, mkv
Use Ctrl+C to stop recoding.

Video codecs:
 *libx264 (high)
  huffyuv (normal)
  libxvid (low)

Screen IDs:
  0 -> primary (LVDS, DP, VGA, HDMI)
 *1 -> lower-left (LVDS, DP, VGA, HDMI)
  2 -> second (DP, VGA, HDMI)
_USAGE_
}

# Default options
use_audio=0
use_window=0
timer=5
vcodec="libx264"
acodec="pcm_s16le"
framerate=30
screen_id=1
outfile="$HOME/screencast_$(date +%m-%d-%Y_%H-%M).mp4"

# Get command line options
while [ "$1" ]; do
    case "$1" in
        -h | --help)
            usage
            exit 0
            ;;
        -a | --audio)
            use_audio=1
            shift
            ;;
        -w | --window)
            use_window=1
            shift
            ;;
        -t | --timer)
            timer=$2
            shift 2
            ;;
        -v | --vcodec)
            vcodec="$2"
            shift 2
            ;;
        -r | --rate)
            framerate=$2
            shift 2
            ;;
        -s | --screen)
            screen_id=$2
            shift 2
            ;;
        -o | --outfile)
            outfile="$2"
            shift 2
            ;;
        *)
            usage
            error_msg "invalid command line option, $1" 1
            ;;
    esac
done

# Validate
if [ $timer -lt 0 ] || [ $timer -gt 60 ]; then
    error_msg "invalid timer value" 1
fi

if [ "$vcodec" != "libx264" ] && [ "$vcodec" != "huffyuv" ] && [ "$vcodec" != "libxvid" ]; then
    error_msg "invalid video codec value" 1
fi

if [ $use_audio -eq 1 ]; then
    if [ "$acodec" != "pcm_s16le" ]; then
        error_msg "invalid audio codec value" 1
    fi
fi

if [ $framerate -lt 20 ] || [ $framerate -gt 75 ]; then
    error_msg "invalid framerate value" 1
fi

if [ $screen_id -lt 0 ] || [ $screen_id -gt 2 ]; then
    error_msg "invalid screen value" 1
fi

# Set video dimensions and offsets
if [ $use_window -eq 0 ]; then
    screen_position $screen_id
    x_offs=${screen_offs[0]}
    y_offs=${screen_offs[1]}
    x=${screen_dims[0]}
    y=${screen_dims[1]}
elif [ $use_window -eq 1 ]; then
    window_position
    x_offs=${win_offs[0]}
    y_offs=${win_offs[1]}
    x=${win_dims[0]}
    y=${win_dims[1]}
fi

sleep $timer

# Run
if [ $use_audio -eq 0 ]; then
    ffmpeg -y -f x11grab -r $framerate -s ${x}x$y -i :0.0+$x_offs,$y_offs -c:v "$vcodec" -crf 0 -preset:v ultrafast "$outfile"
elif [ $use_audio -eq 1 ]; then
    ffmpeg -y -f alsa -i default -f x11grab -r $framerate -s ${x}x$y -i :0.0+$x_offs,$y_offs -c:v "$vcodec" -crf 0 -preset:v ultrafast -c:a "$acodec" -af aresample=async=1:first_pts=0 "$outfile"
fi

exit 0

