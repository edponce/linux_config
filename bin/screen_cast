#!/bin/bash

usage()
{
    echo
    echo "Usage: $(basename $0) [--help] [--audio] [--window] [--timer SECONDS] [--vcodec VIDEO_CODEC] [--rate FRAME_RATE] [--screen SCREEN_ID] [--outfile \"OUTFILE\"]"
    echo
    echo "Record screen into a video file."
    echo
    echo "Default is disabled audio."
    echo "Default is fullscreen, enabled flag to select specific window."
    echo "Default timer is 5 seconds prior to recording."
    echo "Default frame rate is 30 frames/sec."
    echo "Default outfile is \"$HOME/screencast_DATE_TIME.avi\""
    echo "Supported outfile formats: avi, mp4, mpg, mkv"
    echo
    echo "Video codecs:"
    echo " libx264 (high) (default)"
    echo " huffyuv (normal)"
    echo " libxvid (low)"
    echo
    echo "Screen IDs:"
    echo " 0 -> lower-left (default)"
    echo " 1 -> second"
    echo
}

# Default options
use_audio=0
use_window=0
timer=5
vcodec="libx264"
acodec="pcm_s16le"
framerate=30
screen_id=0
outfile="$HOME/screencast_$(date +%m-%d-%Y_%H-%M).avi"

# Get command line options 
while [ "$1" ]; do 
    case "$1" in 
        -h | --help)
        usage
        exit 0
        ;;
        -a | --audio)
        use_audio=1
        shift 1
        ;;
        -w | --window)
        use_window=1
        shift 1
        ;;
        -t | --timer)
        timer=$2
        shift 2
        ;;
        -v | --vcodec)
        vcodec="$2"
        shift 2
        ;;
        -r | --rate)
        framerate=$2
        shift 2
        ;;
        -s | --screen)
        screen_id=$2
        shift 2
        ;;
        -o | --outfile)
        outfile="$2"
        shift 2
        ;;
        *)
        echo "Error: invalid command line option, $1"
        usage
        exit 1
        ;;
    esac
done

# Validate
if [ $timer -lt 0 ] || [ $timer -gt 60 ]; then
    echo "Error: invalid timer value."
    exit 1 
fi

if [ "$vcodec" != "libx264" ] && [ "$vcodec" != "huffyuv" ] && [ "$vcodec" != "libxvid" ]; then
    echo "Error: invalid video codec value."
    exit 1 
fi

if [ $framerate -lt 20 ] || [ $framerate -gt 75 ]; then
    echo "Error: invalid framerate value."
    exit 1 
fi

if [ $screen_id -lt 0 ] || [ $screen_id -gt 1 ]; then
    echo "Error: invalid screen value."
    exit 1 
fi

# Set video dimensions and offsets
. custom_utils
if [ $use_window -eq 0 ]; then
    screen_position $((screen_id + 1))
    x_offs=${screen_offs[0]}
    y_offs=${screen_offs[1]}
    x=${screen_dims[0]}
    y=${screen_dims[1]}
    unset screen_dims screen_offs 
elif [ $use_window -eq 1 ]; then
    window_position
    x_offs=${win_offs[0]}
    y_offs=${win_offs[1]}
    x=${win_dims[0]}
    y=${win_dims[1]}
    unset win_dims win_offs 
fi

sleep $timer

# Run
if [ $use_audio -eq 0 ]; then
    cmd="ffmpeg -y -f x11grab -r $framerate -s ${x}x$y -i :0.$screen_id+$x_offs,$y_offs -c:v $vcodec -crf 0 -preset:v ultrafast \"$outfile\""
elif [ $use_audio -eq 1 ]; then
    cmd="ffmpeg -y -f alsa -i default -f x11grab -r $framerate -s ${x}x$y -i :0.$screen_id+$x_offs,$y_offs -c:v $vcodec -crf 0 -preset:v ultrafast -c:a $acodec -af aresample=async=1:first_pts=0 \"$outfile\""
fi
eval "$cmd"

unset use_audio use_window timer vcodec acodec framerate x y x_offs y_offs screen_id outfile cmd 

