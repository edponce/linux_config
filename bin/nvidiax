#!/bin/bash

usage()
{
    echo
    echo "Usage: $(basename $0) [--help] [--perf PERF_LEVEL] [--tool LAUNCH_TOOL_ID] --run \"APPLICATION\""
    echo
    echo "Runs an application on NVIDIA GPU with power management control."
    echo "An X11 'Device' configuration file sets NVIDIA PowerMizer options."
    echo
    echo "This script may require root privileges to change the performance level"
    echo "of the X11 NVIDIA configuration file."
    echo
    echo "X11 NVIDIA configuration file: $1"
    echo
    echo "GPU Performance levels:"
    echo " 1 -> high"
    echo " 2 -> medium"
    echo " 3 -> low (default)"
    echo
    echo "GPU launch tools:"
    echo " 0 -> none"
    echo " 1 -> primusrun (OpenGL support, default)"
    echo " 2 -> optirun"
    echo
}

# X11 NVIDIA configuration file
x11_nvidia_file="/etc/bumblebee/xorg.conf.nvidia"

# Default options
launch_tool=1
perf_level=3
perf_level_changed=0
app=

# Get command line options 
while [ "$1" ]; do 
    case "$1" in 
        -h | --help)
        usage $x11_nvidia_file
        exit 0
        ;;
        -t | --tool)
        launch_tool=$2
        shift 2
        ;;
        -p | --perf)
        perf_level=$2
        shift 2
        ;;
        -r | --run)
        app="$2"
        shift 2 
        ;;
        *)
        echo "Error: invalid command line option, $1"
        usage $x11_nvidia_file
        exit 1
        ;;
    esac
done

# Validate
if [ -z "$app" ]; then
    echo "Error: no application was specified."
    exit 1
fi

# app [args]
appname="$(echo "$app" | awk '{ print $1 }')"
which "$appname" > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "Error: application '$appname' was not found."
    exit 1
fi

if [ $launch_tool -lt 0 ] || [ $launch_tool -gt 2 ]; then
    echo "Error: invalid launch tool identifier [0-2]."
    exit 1 
fi

if [ $launch_tool -gt 0 ]; then
    # Check that NVIDIA modules are not loaded/used by other applications 
    if [ $(lsmod | grep -c 'nvidia') -gt 0 ]; then
        echo "Warning: Please close all applications using NVIDIA modules...exiting."
        exit 0
    fi

    if [ $perf_level -lt 1 ] || [ $perf_level -gt 3 ]; then
        echo "Error: invalid performance level [1-3]."
        exit 1 
    fi

    if [ ! -e "$x11_nvidia_file" ]; then
        echo "Error: X11 NVIDIA configuration file '$x11_nvidia_file' does not exists."
        exit 1
    fi

    # Get current performance level in X11 NVIDIA configuration file
    default_perf_level=$(grep 'RegistryDwords' "$x11_nvidia_file" | grep -o 'PowerMizerDefault=0x[[:digit:]]' | awk -F'=0x' '{ print $2 }')
    echo "Current NVIDIA GPU performance level is $default_perf_level."

    # Set performance level in X11 NVIDIA configuration file
    if [ $perf_level -ne $default_perf_level ]; then
        echo "Setting NVIDIA GPU performance level to $perf_level."
        sudo sed -i "s/\b\(PowerMizer\(Default\|DefaultAC\)=0x\)[[:digit:]];\?\b/\1$perf_level/g" "$x11_nvidia_file"
        perf_level_changed=1
        sleep 0.5 
    fi
fi

# Select launcher tool
case $launch_tool in
    0) $app ;;
    1) primusrun $app ;;
    2) optirun $app ;;
esac

# Restore default performance level
if [ $perf_level_changed -eq 1 ]; then
    echo "Restoring NVIDIA GPU performance level to $default_perf_level."
    sudo sed -i "s/\b\(PowerMizer\(Default\|DefaultAC\)=0x\)[[:digit:]];\?\b/\1$default_perf_level/g" "$x11_nvidia_file"
    perf_level_changed=0
fi

exit 0

