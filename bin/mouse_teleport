#!/bin/bash

usage()
{
    echo
    echo "Usage: $(basename $0) [--help] [--relative DISTANCE | --screen SCREEN_ID] [--direction DIRECTION_ID] [--click CLICK_ID]"
    echo
    echo "Moves mouse in the specified direction using preset or relative screen positions." 
    echo
    echo "In dual extended screens, a screen number can be provided (w/o relative flag)."
    echo "Also, left and right mouse clicks can be simulated (all other options are ignored)."
    echo
    echo "Screen IDs:"
    echo " 0 -> current (default)"
    echo " 1 -> lower-left"
    echo " 2 -> second"
    echo
    echo "Direction IDs:"
    echo " 0 -> left (default)"
    echo " 1 -> up"
    echo " 2 -> right"
    echo " 3 -> down"
    echo " 4 -> center (w/o relative flag)"
    echo
    echo "Click IDs:"
    echo " 0 -> left (default)"
    echo " 1 -> right"
}

# Default options 
screen_id=0
movement="mousemove"
rel_dist=10
direction_id=0
edge_dist=60
mouse_click=

# Get command line options 
while [ "$1" ]; do 
    case "$1" in 
        -h | --help)
        usage
        exit 0
        ;;
        -r | --relative)
        movement="mousemove_relative"
        rel_dist=$2
        shift 2
        ;;
        -s | --screen)
        screen_id=$2
        shift 2
        ;;
        -d | --direction)
        direction_id=$2
        shift 2
        ;;
        -c | --click)
        mouse_click=$2
        shift 2
        ;;
        *)
        echo "Error: invalid command line option, $1"
        usage
        exit 1
        ;;
    esac
done

# Validate
if [ $rel_dist -lt 0 ]; then
    echo "Error: invalid relative distance value."
    exit 1 
fi

if [ $screen_id -lt 0 ] || [ $screen_id -gt 2 ]; then
    echo "Error: invalid screen value."
    exit 1 
fi

if [ $direction_id -lt 0 ] || [ $direction_id -gt 4 ]; then
    echo "Error: invalid direction value."
    exit 1 
fi

# Click window located at current mouse position
if [ ! -z $mouse_click ]; then
    if [ $mouse_click -lt 0 ] || [ $mouse_click -gt 1 ]; then
        echo "Error: invalid mouse click value."
        exit 1 
    fi

    # Outputs: X, Y, SCREEN, WINDOW 
    eval $(xdotool getmouselocation --shell)
    xdotool windowactivate $WINDOW
    
    # Run
    case $mouse_click in
        0) # left click
        xdotool click 1 ;;
        1) # right click
        xdotool click 3 ;;
    esac
else
    # Move mouse pointer
    if [ "$movement" = "mousemove" ]; then
        . custom_utils

        # Find screen of current mouse position
        if [ $screen_id -eq 0 ]; then
            # Get position of lower-left screen
            screen_position 1 

            # Outputs: X, Y, SCREEN, WINDOW 
            eval $(xdotool getmouselocation --shell)
            if [ $X -le ${screen_dims[0]} ]; then
                screen_id=1
            else
                screen_id=2
            fi
        fi

        # Get position of selected screen
        screen_position $((screen_id))

        # Move mouse to preset position 
        case $direction_id in
            0) # left
            x=$edge_dist
            y=$((screen_dims[1] / 2))
            ;;
            1) # up
            x=$((screen_dims[0] / 2))
            y=$edge_dist
            ;;
            2) # right 
            x=$((screen_dims[0] - edge_dist))
            y=$((screen_dims[1] / 2))
            ;;
            3) # down 
            x=$((screen_dims[0] / 2))
            if [ $screen_id -eq 1 ]; then
                # Show desktop panel
                y=${screen_dims[1]}
            else
                y=$((screen_dims[1] - edge_dist))
            fi
            ;;
            4) # center 
            x=$((screen_dims[0] / 2))
            y=$((screen_dims[1] / 2))
            ;;
        esac
        x=$((screen_offs[0] + x))
        y=$((screen_offs[1] + y))
    elif [ "$movement" = "mousemove_relative" ]; then
        # Move mouse to relative position 
        x=0
        y=0
        case $direction_id in
            0) x=-$rel_dist ;;
            1) y=-$rel_dist ;;
            2) x=$rel_dist ;;
            3) y=$rel_dist ;;
        esac
    fi

    # Run
    xdotool "$movement" --sync -- $x $y
fi

exit 0

