#!/bin/bash

# Get list of primary and other [dis]connected monitors
#  *0 -> primary
#   1 -> others connected
#   2 -> all connected (primary, others)
#   3 -> all disconnected
#   4 -> all connected and disconnected (primary, others)
#
# Inputs: [monitor ID]
# Outputs: monitors_select
# Usage: connected_monitors 0
connected_monitors()
{
    mid=0
    primary_monitor=""
    other_monitors=()
    all_monitors=()
    monitors_select=()

    [ $# -ge 1 ] && mid=$1

    # Get primary monitor
    primary_monitor="$(xrandr | grep '\bprimary\b' | awk '{ print $1 }')"
    if [ -z "$primary_monitor" ]; then
        primary_monitor="$(xrandr | grep '\bconnected\b' | head -n 1 | awk '{ print $1 }')"
    fi

    case $mid in
        0) # Primary monitor
            monitors_select=("$primary_monitor")
            ;;
        1) # Others connected monitors
            all_monitors=($(xrandr | grep '\bconnected\b' | awk '{ print $1 }'))
            monitors_select=($(comm -23 <(printf '%s\n' "${all_monitors[@]}" | LC_ALL=C sort) <(printf '%s\n' "$primary_monitor")))
            ;;
        2) # All connected monitors
            all_monitors=($(xrandr | grep '\bconnected\b' | awk '{ print $1 }'))
            other_monitors=($(comm -23 <(printf '%s\n' "${all_monitors[@]}" | LC_ALL=C sort) <(printf '%s\n' "$primary_monitor")))
            monitors_select=("$primary_monitor" "${other_monitors[@]}")
            ;;
        3) # All disconnected monitors
            monitors_select=($(xrandr | grep '\bdisconnected\b' | awk '{ print $1 }'))
            ;;
        4) # All connected and disconnected
            all_monitors=($(xrandr | grep 'connected\b' | awk '{ print $1 }'))
            other_monitors=($(comm -23 <(printf '%s\n' "${all_monitors[@]}" | LC_ALL=C sort) <(printf '%s\n' "$primary_monitor")))
            monitors_select=("$primary_monitor" "${other_monitors[@]}")
            ;;
    esac

    unset mid primary_monitor other_monitors all_monitors
}

# Get dimensions and offsets of selected screen
#   0 -> primary
#  *1 -> lower-left
#   2 -> second screen
#
# Inputs: [screen ID]
# Outputs: screen_dims, screen_offs
# Usage: screen_position 1
screen_position()
{
    sid=1
    screen_regex=""
    screen_query=""
    screen_dims=()
    screen_offs=()

    [ $# -ge 1 ] && sid=$1

    case $sid in
        0) # Primary screen
            screen_regex="primary\W\d+x\d+((\+|-)\d+){2}\W" ;;
        1) # Lower-left screen
            screen_regex="\W\d+x\d+((\+|-)0){2}\W" ;;
        2) # Second screen
            [ $(xrandr | grep -c '\bconnected\b') -eq 2 ] || return 0
            screen_regex="\W\d+x\d+(((\+|-)[1-9][0-9]*){2}|(\+|-)0(\+|-)[1-9][0-9]*|(\+|-)[1-9][0-9]*(\+|-)0)\W" ;;
    esac

    # Parse dimensions and offsets
    screen_query="$(xrandr | grep -P -o $screen_regex | head -n 1 | sed -e 's/ //' -e 's/primary//' -e 's/x/:/' -e 's/+/:/g' -e 's/-/:-/g')"
    screen_dims=($(echo "$screen_query" | awk -F':' '{ print $1 " " $2 }'))
    screen_offs=($(echo "$screen_query" | awk -F':' '{ print $3 " " $4 }'))

    unset sid screen_regex screen_query
}

# Get dimensions and offsets of selected window
#
# Inputs: [window ID (int|hex value)]
# Outputs: win_dims, win_offs
# Usage: window_position 0x0100004
window_position()
{
    wid=""
    win_values=()
    win_dims=()
    win_offs=()

    if [ $# -ge 1 ]; then
        wid="-id $1"
    else
        echo "Please click on a window to get its position and geometry information ..."
    fi

    win_values=($(xwininfo $wid | grep -E '(X|Y|Width|Height):' | awk -F':' '{ print $2 }'))
    win_offs=($((win_values[0] - win_values[2])) $((win_values[1] - win_values[3])))
    win_dims=(${win_values[4]} ${win_values[5]})

    unset wid win_values
}

