#!/bin/sh

. "$HOME/bin/common_utils"
. "$HOME/bin/error_utils"

usage()
{
cat << _USAGE_
Usage: $(basename $0) [--help] [--type DOC_TYPE] [--file "ADFILE"]

Compile an ASCIIDoc file into PDF format based on the specified document type.

If an ASCIIDoc file is not provided, current directory is searched for one.
Default file type is article.

For more information go to:
http://asciidoc.org/faq.html
http://docbook.sourceforge.net/release/xsl/current/doc/index.html
http://dblatex.sourceforge.net

Additional options for a2x can be included as comments at top of document:
// a2x: --dblatex-opts "-P page.margin.top=1in -P page.margin.bottom=1.5in"
// a2x: --dblatex-opts "-P page.margin.inner=1in -P page.margin.outer=1in"
// a2x: --dblatex-opts "-P latex.output.revhistory=0"
// a2x: --dblatex-opts "-P doc.alignment='left'" (or 'justify')
// a2x: --dblatex-opts "-P doc.layout='coverpage,toc,frontmatter,mainmatter,index'"
// a2x: --dblatex-opts "-P doc.lot.show='figure,table'"
// a2x: --dblatex-opts "-P draft.mode='yes'"

Document types:
 *0 -> article: title, TOC, abstract, sections (page split, wide textarea)
  1 -> book: title, TOC, preamble, abstract, chapters (page split, wide textarea)
_USAGE_
}

# Default options
adtype=0
adffile=""
filext=".asciidoc"

# Get command line options
while [ "$1" ]; do
    case "$1" in
        -h | --help) usage
            exit 0 ;;
        -t | --type)
            case ${2#[-+]} in
                "") error_msg "incomplete command line option, $1" 1 ;;
                *[!0-9]*) error_msg "invalid command line option-value, $1 $2" 1 ;;
                *) adtype=$2 ;;
            esac
            shift 2 ;;
        -f | --file)
            case "$2" in
                "") error_msg "incomplete command line option, $1" 1 ;;
                *) adffile="$2" ;;
            esac
            shift 2 ;;
        *) usage
            error_msg "invalid command line option, $1" 1 ;;
    esac
done

# Check application dependences
missing_apps=0
for a in cat dirname basename a2x dblatex xdg-open; do
    if [ ! "$(command -v "$a")" ]; then
        error_msg "application '$a' was not found"
        missing_apps=$((missing_apps + 1))
    fi
done
[ $missing_apps -eq 0 ] || exit 1

# Validate
if [ $adtype -lt 0 ] || [ $adtype -gt 1 ]; then
    error_msg "invalid document type value" 1
fi
[ -z "$adffile" ] && adffile="$(find_file_ext "$filext")"
if [ ! -f "$adffile" ]; then
    error_msg "file '$adffile' does not exists" 1
fi

# Commands (compile and view)
addir="$(dirname "$adffile")"
adfile="$(basename "$adffile")"
adbase="${adfile%.*}"
adpdf="$adbase.pdf"
adxml="$adbase.xml"
dblatex_cmd="dblatex \"$adxml\" -T native"
view_cmd="xdg-open \"$adpdf\""
case $adtype in
    0) ad_cmd="a2x -d article -f pdf \"$adfile\"" ;;
    1) ad_cmd="a2x -d book -f pdf \"$adfile\"" ;;
esac

# Change to file directory
pushd . > /dev/null 2>&1
cd "$addir"

# Run
eval $ad_cmd; [ $? -eq 0 ] || exit 1
if [ -f "$adxml" ]; then
    eval $dblatex_cmd; [ $? -eq 0 ] || exit 1
    rm "$adxml"
fi

# View
[ -f "$adpdf" ] && eval $view_cmd &

# Change to initial directory
popd > /dev/null 2>&1

