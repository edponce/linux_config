#!/bin/bash

. "$HOME/bin/error_utils"
. "$HOME/bin/custom_utils"

usage()
{
cat << _USAGE_
Usage: $(basename $0) [--help] [--mirror] [--protocol PROTOCOL] [--direction DIRECTION_ID]

Change monitor configuration.

For secondary monitor protocol, default is extended screen.
Direction ID is not used for primary protocol or if mirror option is set.

Protocols:
 *0 -> Primary (LVDS, DP, VGA, HDMI)
  1 -> Secondary (DP, VGA, HDMI)

Direction IDs for extended mode:
 *0 -> left
  1 -> above
  2 -> right
  3 -> below
_USAGE_
}

# Default options
mirror=0
mon_proto=0
direction_id=0

# Get command line options
while [ "$1" ]; do
    case "$1" in
        -h | --help)
            usage
            exit 0
            ;;
        -m | --mirror)
            mirror=1
            shift
            ;;
        -p | --protocol)
            mon_proto=$2
            shift 2
            ;;
        -d | --direction)
            direction_id=$2
            shift 2
            ;;
        *)
            usage
            error_msg "invalid command line option, $1" 1
            ;;
    esac
done

# Validate
if [ $mon_proto -lt 0 ] || [ $mon_proto -gt 1 ]; then
    error_msg "invalid protocol value" 1
fi

if [ $direction_id -lt 0 ] || [ $direction_id -gt 3 ]; then
    error_msg "invalid direction value" 1
fi

# Get connected monitors
connected_monitors 2
num_mon_connected=${#monitors_select[@]}

# Configure primary monitor
mon_primary="${monitors_select[0]}"
primary_opts="--output $mon_primary --primary --auto --pos 0x0 --rotate normal"

# Configure secondary monitor
mon_secondary=
secondary_opts=
if [ $num_mon_connected -gt 1 ]; then
    mon_secondary="${monitors_select[1]}"
    secondary_opts="--output $mon_secondary --off"
fi

# Get disconnected monitors
connected_monitors 3
disconnect_opts=
for each in "${monitors_select[@]}"; do
    disconnect_opts+="--output $each --off "
done

# Configure secondary monitor
if [ $mon_proto -eq 1 ]; then
    if [ $num_mon_connected -eq 1 ]; then
        error_msg "Secondary monitor was not detected" 1
    fi

    if [ $mirror -eq 0 ]; then
        # Run to have only primary monitor active (restore settings)
        xrandr $primary_opts $secondary_opts

        # Extended mode
        case $direction_id in
            0) rel_pos="--left-of $mon_primary" ;;
            1) rel_pos="--above $mon_primary" ;;
            2) rel_pos="--right-of $mon_primary" ;;
            3) rel_pos="--below $mon_primary" ;;
        esac
        scale_res=
    elif [ $mirror -eq 1 ]; then
        # Mirror mode
        rel_pos="--pos 0x0"

        # Scale resolution of secondary monitor to match primary monitor
        screen_position 0
        scale_res="--scale-from ${screen_dims[0]}x${screen_dims[1]}"
    fi
    secondary_opts="--output $mon_secondary --auto $scale_res $rel_pos --rotate normal"
fi

# Run
xrandr $primary_opts $secondary_opts $disconnect_opts

# Move mouse to center of screen
case $direction_id in
    0 | 3) mouse_teleport -s 1 -d 4 ;;
    1 | 2) mouse_teleport -s 2 -d 4 ;;
esac

